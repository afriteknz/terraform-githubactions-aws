name: 'Terraform Plan'

on:
  push:
    branches:
      - main
    paths:
      - infrastructure/**

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO

 # S3 bucket for the Terraform state
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
 BUCKET_TF_KEY: ${{ secrets.BUCKET_TF_KEY}}
 BUCKET_REGION: ${{ secrets.BUCKET_REGION}}

jobs:

  infra_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      issues: write
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
        
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ secrets.IAM_ROLE }}
        role-session-name: AWSSession
        aws-region: ap-southeast-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.3

    - name: Terraform Format
      id: fmt
      run: terraform fmt -recursive -check

    - name: Terraform Init
      id: init
      run: |
          terraform init \
            -backend-config="bucket=$BUCKET_TF_STATE" \
            -backend-config="key=$BUCKET_TF_KEY" \
            -backend-config="region=$BUCKET_REGION" \
            -backend-config="encrypt=true"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color -out=tfplan && terraform show -no-color tfplan

    - name: Add Plan Comment
      if: steps.plan.outcome == 'success'
      uses: actions/github-script@v7
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.AWSGITHUBTOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Post Plan Failure 
      if: steps.plan.outcome == 'failure'
      uses: actions/github-script@v7
      env:
        PLAN_FAIL: "terraform\n${{ steps.plan.outputs.stderr }}"
      with:
        github-token: ${{ secrets.AWSGITHUBTOKEN }}
        script: |
          const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan Error</summary>
          
          \`\`\`${process.env.PLAN_FAIL}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })


